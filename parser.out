Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> def
Rule 1     def -> assigns
Rule 2     assigns -> assign
Rule 3     assigns -> assigns assign
Rule 4     assign -> init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES
Rule 5     init_graphviz -> STRING TWO_DOTS
Rule 6     contraint -> STRING HYPHEN STRING
Rule 7     contraint -> STRING
Rule 8     expr -> components
Rule 9     components -> STRING COMMA components
Rule 10    components -> NUMBER COMMA components
Rule 11    components -> opt_case COMMA components
Rule 12    components -> STRING
Rule 13    components -> NUMBER
Rule 14    components -> opt_case
Rule 15    opt_case -> STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES

Terminals, with rules where they appear

CLOSE_PARENTHESES    : 4 15
COMMA                : 9 10 11
HYPHEN               : 6
NUMBER               : 10 13
OPEN_PARENTHESES     : 4 15
STRING               : 5 6 6 7 9 12 15 15
TWO_DOTS             : 5
error                : 

Nonterminals, with rules where they appear

assign               : 2 3
assigns              : 1 3
components           : 8 9 10 11
contraint            : 4
def                  : 0
expr                 : 4
init_graphviz        : 4
opt_case             : 11 14

Parsing method: LALR

state 0

    (0) S' -> . def
    (1) def -> . assigns
    (2) assigns -> . assign
    (3) assigns -> . assigns assign
    (4) assign -> . init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES
    (5) init_graphviz -> . STRING TWO_DOTS

    STRING          shift and go to state 5

    def                            shift and go to state 1
    assigns                        shift and go to state 2
    assign                         shift and go to state 3
    init_graphviz                  shift and go to state 4

state 1

    (0) S' -> def .



state 2

    (1) def -> assigns .
    (3) assigns -> assigns . assign
    (4) assign -> . init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES
    (5) init_graphviz -> . STRING TWO_DOTS

    $end            reduce using rule 1 (def -> assigns .)
    STRING          shift and go to state 5

    assign                         shift and go to state 6
    init_graphviz                  shift and go to state 4

state 3

    (2) assigns -> assign .

    STRING          reduce using rule 2 (assigns -> assign .)
    $end            reduce using rule 2 (assigns -> assign .)


state 4

    (4) assign -> init_graphviz . contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES
    (6) contraint -> . STRING HYPHEN STRING
    (7) contraint -> . STRING

    STRING          shift and go to state 8

    contraint                      shift and go to state 7

state 5

    (5) init_graphviz -> STRING . TWO_DOTS

    TWO_DOTS        shift and go to state 9


state 6

    (3) assigns -> assigns assign .

    STRING          reduce using rule 3 (assigns -> assigns assign .)
    $end            reduce using rule 3 (assigns -> assigns assign .)


state 7

    (4) assign -> init_graphviz contraint . OPEN_PARENTHESES expr CLOSE_PARENTHESES

    OPEN_PARENTHESES shift and go to state 10


state 8

    (6) contraint -> STRING . HYPHEN STRING
    (7) contraint -> STRING .

    HYPHEN          shift and go to state 11
    OPEN_PARENTHESES reduce using rule 7 (contraint -> STRING .)


state 9

    (5) init_graphviz -> STRING TWO_DOTS .

    STRING          reduce using rule 5 (init_graphviz -> STRING TWO_DOTS .)


state 10

    (4) assign -> init_graphviz contraint OPEN_PARENTHESES . expr CLOSE_PARENTHESES
    (8) expr -> . components
    (9) components -> . STRING COMMA components
    (10) components -> . NUMBER COMMA components
    (11) components -> . opt_case COMMA components
    (12) components -> . STRING
    (13) components -> . NUMBER
    (14) components -> . opt_case
    (15) opt_case -> . STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES

    STRING          shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 12
    components                     shift and go to state 13
    opt_case                       shift and go to state 16

state 11

    (6) contraint -> STRING HYPHEN . STRING

    STRING          shift and go to state 17


state 12

    (4) assign -> init_graphviz contraint OPEN_PARENTHESES expr . CLOSE_PARENTHESES

    CLOSE_PARENTHESES shift and go to state 18


state 13

    (8) expr -> components .

    CLOSE_PARENTHESES reduce using rule 8 (expr -> components .)


state 14

    (9) components -> STRING . COMMA components
    (12) components -> STRING .
    (15) opt_case -> STRING . OPEN_PARENTHESES STRING CLOSE_PARENTHESES

    COMMA           shift and go to state 19
    CLOSE_PARENTHESES reduce using rule 12 (components -> STRING .)
    OPEN_PARENTHESES shift and go to state 20


state 15

    (10) components -> NUMBER . COMMA components
    (13) components -> NUMBER .

    COMMA           shift and go to state 21
    CLOSE_PARENTHESES reduce using rule 13 (components -> NUMBER .)


state 16

    (11) components -> opt_case . COMMA components
    (14) components -> opt_case .

    COMMA           shift and go to state 22
    CLOSE_PARENTHESES reduce using rule 14 (components -> opt_case .)


state 17

    (6) contraint -> STRING HYPHEN STRING .

    OPEN_PARENTHESES reduce using rule 6 (contraint -> STRING HYPHEN STRING .)


state 18

    (4) assign -> init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES .

    STRING          reduce using rule 4 (assign -> init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES .)
    $end            reduce using rule 4 (assign -> init_graphviz contraint OPEN_PARENTHESES expr CLOSE_PARENTHESES .)


state 19

    (9) components -> STRING COMMA . components
    (9) components -> . STRING COMMA components
    (10) components -> . NUMBER COMMA components
    (11) components -> . opt_case COMMA components
    (12) components -> . STRING
    (13) components -> . NUMBER
    (14) components -> . opt_case
    (15) opt_case -> . STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES

    STRING          shift and go to state 14
    NUMBER          shift and go to state 15

    components                     shift and go to state 23
    opt_case                       shift and go to state 16

state 20

    (15) opt_case -> STRING OPEN_PARENTHESES . STRING CLOSE_PARENTHESES

    STRING          shift and go to state 24


state 21

    (10) components -> NUMBER COMMA . components
    (9) components -> . STRING COMMA components
    (10) components -> . NUMBER COMMA components
    (11) components -> . opt_case COMMA components
    (12) components -> . STRING
    (13) components -> . NUMBER
    (14) components -> . opt_case
    (15) opt_case -> . STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES

    STRING          shift and go to state 14
    NUMBER          shift and go to state 15

    components                     shift and go to state 25
    opt_case                       shift and go to state 16

state 22

    (11) components -> opt_case COMMA . components
    (9) components -> . STRING COMMA components
    (10) components -> . NUMBER COMMA components
    (11) components -> . opt_case COMMA components
    (12) components -> . STRING
    (13) components -> . NUMBER
    (14) components -> . opt_case
    (15) opt_case -> . STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES

    STRING          shift and go to state 14
    NUMBER          shift and go to state 15

    opt_case                       shift and go to state 16
    components                     shift and go to state 26

state 23

    (9) components -> STRING COMMA components .

    CLOSE_PARENTHESES reduce using rule 9 (components -> STRING COMMA components .)


state 24

    (15) opt_case -> STRING OPEN_PARENTHESES STRING . CLOSE_PARENTHESES

    CLOSE_PARENTHESES shift and go to state 27


state 25

    (10) components -> NUMBER COMMA components .

    CLOSE_PARENTHESES reduce using rule 10 (components -> NUMBER COMMA components .)


state 26

    (11) components -> opt_case COMMA components .

    CLOSE_PARENTHESES reduce using rule 11 (components -> opt_case COMMA components .)


state 27

    (15) opt_case -> STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES .

    COMMA           reduce using rule 15 (opt_case -> STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES .)
    CLOSE_PARENTHESES reduce using rule 15 (opt_case -> STRING OPEN_PARENTHESES STRING CLOSE_PARENTHESES .)

